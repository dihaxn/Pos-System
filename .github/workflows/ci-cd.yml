name: LLOMS POS System CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  JAVA_VERSION: "21"

jobs:
  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [pos-system, user-website]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
          cache-dependency-path: "frontend/${{ matrix.app }}/package-lock.json"

      - name: Debug - Check file contents
        run: |
          echo "Checking ContactUs file contents:"
          head -20 frontend/user-website/src/components/ContactUs/ContactUs.jsx || echo "File not found"
          echo "Checking for Material-UI imports:"
          grep -r "@mui" frontend/${{ matrix.app }}/src/ || echo "No Material-UI imports found"
        if: matrix.app == 'user-website'

      - name: Install dependencies
        run: |
          cd frontend/${{ matrix.app }}
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install --legacy-peer-deps --verbose
          npm list @mui/material || echo "Material-UI not found"

      - name: Run linting
        run: |
          cd frontend/${{ matrix.app }}
          npm run lint || echo "Linting not configured"

      - name: Run tests
        run: |
          cd frontend/${{ matrix.app }}
          npm test -- --coverage --watchAll=false || echo "Tests not configured"

      - name: Build application
        run: |
          cd frontend/${{ matrix.app }}
          npm run build

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            product-service,
            user-service,
            outlet-service,
            reporting-service,
            discovery-service,
            api-gateway,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build service
        run: |
          cd services/${{ matrix.service }}
          mvn clean compile test-compile -q

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          mvn test -q || echo "Tests not configured for ${{ matrix.service }}"

  # BFF Tests
  bff-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "bff/package-lock.json"

      - name: Cache BFF dependencies
        uses: actions/cache@v4
        with:
          path: bff/node_modules
          key: ${{ runner.os }}-bff-npm-${{ hashFiles('bff/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-bff-npm-

      - name: Install dependencies
        run: |
          cd bff
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      - name: Run tests
        run: |
          cd bff
          npm test || echo "Tests not configured"

      - name: Build BFF
        run: |
          cd bff
          npm run build || echo "Build script not configured"

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, bff-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend images
        run: |
          docker build -t lloms/pos-system:latest -f frontend/pos-system/Dockerfile frontend/pos-system/
          docker build -t lloms/user-website:latest -f frontend/user-website/Dockerfile frontend/user-website/

      - name: Build backend images
        run: |
          for service in product-service user-service outlet-service reporting-service discovery-service api-gateway; do
            docker build -t lloms/$service:latest -f services/$service/Dockerfile services/$service/
          done

      - name: Build BFF image
        run: |
          docker build -t lloms/bff:latest -f bff/Dockerfile bff/

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Deploy to Staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

  # Deploy to Production (on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f docker-compose.prod.yml up -d

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
